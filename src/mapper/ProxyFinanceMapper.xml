<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.ProxyFinanceMapper">
    <resultMap id="BaseResultMap" type="model.ProxyFinance">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="phoneNum" jdbcType="VARCHAR" property="phoneNum"/>
        <result column="sum_income" jdbcType="DOUBLE" property="sum_income"/>
        <result column="avaiable" jdbcType="DOUBLE" property="avaiable"/>
        <result column="balanced" jdbcType="DOUBLE" property="balanced"/>
        <result column="balancing" jdbcType="DOUBLE" property="balancing"/>
        <result column="modifytime" jdbcType="TIMESTAMP" property="modifytime"/>
        <result column="createtime" jdbcType="TIMESTAMP" property="createtime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, phoneNum, sum_income, avaiable, balanced, balancing, modifytime, createtime
  </sql>
    <select id="selectByExample" parameterType="model.ProxyFinanceExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from proxy_finance
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limitValue">
            limit #{startSize},#{pageSize}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from proxy_finance
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectByKeywords"  resultMap="BaseResultMap">
        select sum(f.sum_income) as sum_income ,sum(f.avaiable) as avaiable,
        sum(f.balanced) as balanced,sum(f.balancing) as balancing
        from proxy_finance f  LEFT JOIN admin a ON (f.phoneNum =
        a.phoneNum)
        <where>
            1=1
            <if test="stime!=null">
                and f.modifytime &gt;= #{stime}
            </if>
            <if test="etime!=null">
                and f.modifytime &lt;= #{etime}
            </if>
            <if test="keywords!=null">
                and locate(#{keywords},concat_ws(',',a.account,a.username))>0
            </if>
        </where>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from proxy_finance
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="model.ProxyFinanceExample">
        delete from proxy_finance
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="model.ProxyFinance">
    insert into proxy_finance (id, phoneNum, sum_income, 
      avaiable, balanced, balancing, 
      modifytime, createtime)
    values (#{id,jdbcType=INTEGER}, #{phoneNum,jdbcType=VARCHAR}, #{sum_income,jdbcType=DOUBLE}, 
      #{avaiable,jdbcType=DOUBLE}, #{balanced,jdbcType=DOUBLE}, #{balancing,jdbcType=DOUBLE}, 
      #{modifytime,jdbcType=TIMESTAMP}, #{createtime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="model.ProxyFinance">
        insert into proxy_finance
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="phoneNum != null">
                phoneNum,
            </if>
            <if test="sum_income != null">
                sum_income,
            </if>
            <if test="avaiable != null">
                avaiable,
            </if>
            <if test="balanced != null">
                balanced,
            </if>
            <if test="balancing != null">
                balancing,
            </if>
            <if test="modifytime != null">
                modifytime,
            </if>
            <if test="createtime != null">
                createtime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="phoneNum != null">
                #{phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="sum_income != null">
                #{sum_income,jdbcType=DOUBLE},
            </if>
            <if test="avaiable != null">
                #{avaiable,jdbcType=DOUBLE},
            </if>
            <if test="balanced != null">
                #{balanced,jdbcType=DOUBLE},
            </if>
            <if test="balancing != null">
                #{balancing,jdbcType=DOUBLE},
            </if>
            <if test="modifytime != null">
                #{modifytime,jdbcType=TIMESTAMP},
            </if>
            <if test="createtime != null">
                #{createtime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="model.ProxyFinanceExample" resultType="java.lang.Integer">
        select count(*) from proxy_finance
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update proxy_finance
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.phoneNum != null">
                phoneNum = #{record.phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="record.sum_income != null">
                sum_income = #{record.sum_income,jdbcType=DOUBLE},
            </if>
            <if test="record.avaiable != null">
                avaiable = #{record.avaiable,jdbcType=DOUBLE},
            </if>
            <if test="record.balanced != null">
                balanced = #{record.balanced,jdbcType=DOUBLE},
            </if>
            <if test="record.balancing != null">
                balancing = #{record.balancing,jdbcType=DOUBLE},
            </if>
            <if test="record.modifytime != null">
                modifytime = #{record.modifytime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createtime != null">
                createtime = #{record.createtime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update proxy_finance
        set id = #{record.id,jdbcType=INTEGER},
        phoneNum = #{record.phoneNum,jdbcType=VARCHAR},
        sum_income = #{record.sum_income,jdbcType=DOUBLE},
        avaiable = #{record.avaiable,jdbcType=DOUBLE},
        balanced = #{record.balanced,jdbcType=DOUBLE},
        balancing = #{record.balancing,jdbcType=DOUBLE},
        modifytime = #{record.modifytime,jdbcType=TIMESTAMP},
        createtime = #{record.createtime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="model.ProxyFinance">
        update proxy_finance
        <set>
            <if test="phoneNum != null">
                phoneNum = #{phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="sum_income != null">
                sum_income = #{sum_income,jdbcType=DOUBLE},
            </if>
            <if test="avaiable != null">
                avaiable = #{avaiable,jdbcType=DOUBLE},
            </if>
            <if test="balanced != null">
                balanced = #{balanced,jdbcType=DOUBLE},
            </if>
            <if test="balancing != null">
                balancing = #{balancing,jdbcType=DOUBLE},
            </if>
            <if test="modifytime != null">
                modifytime = #{modifytime,jdbcType=TIMESTAMP},
            </if>
            <if test="createtime != null">
                createtime = #{createtime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="model.ProxyFinance">
    update proxy_finance
    set phoneNum = #{phoneNum,jdbcType=VARCHAR},
      sum_income = #{sum_income,jdbcType=DOUBLE},
      avaiable = #{avaiable,jdbcType=DOUBLE},
      balanced = #{balanced,jdbcType=DOUBLE},
      balancing = #{balancing,jdbcType=DOUBLE},
      modifytime = #{modifytime,jdbcType=TIMESTAMP},
      createtime = #{createtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="getFinanceTaxes" parameterType="model.Admin" resultType="model.FinanceTaxes">
    select
    f.*
    from financetaxes f INNER JOIN proxy_taxes_rule r  ON (r.taxesid = f.id)
    where
    r.userphone = admin.phoneNum  OR  r.proxy_level = admin.level
  </select>

    <select id="selectByPhone" parameterType="java.lang.String" resultType="model.ProxyFinance">
        select
        *
        from proxy_finance where
        phoneNum = #{phone} limit 1
    </select>

</mapper>