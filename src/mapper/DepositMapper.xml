<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.DepositMapper">
    <resultMap id="BaseResultMap" type="model.Deposit">
        <id column="out_trade_no" jdbcType="VARCHAR" property="out_trade_no"/>
        <result column="phoneNum" jdbcType="VARCHAR" property="phoneNum"/>
        <result column="trade_no" jdbcType="VARCHAR" property="trade_no"/>
        <result column="fee" jdbcType="DOUBLE" property="fee"/>
        <result column="date" jdbcType="DATE" property="date"/>
        <result column="date_time" jdbcType="TIMESTAMP" property="date_time"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="result" jdbcType="VARCHAR" property="result"/>
        <result column="cause" jdbcType="VARCHAR" property="cause"/>
        <result column="taxesid" jdbcType="INTEGER" property="taxesid"/>
        <result column="taxes" jdbcType="DOUBLE" property="taxes"/>
        <result column="proxy_taxesid" jdbcType="INTEGER" property="proxy_taxesid"/>
        <result column="proxy_taxes" jdbcType="DOUBLE" property="proxy_taxes"/>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>


    <sql id="Base_Column_List">
    out_trade_no, phoneNum, trade_no, fee, date, date_time, remark, result, cause, taxesid, taxes,
    proxy_taxesid,proxy_taxes
  </sql>

    <select id="selectByExample" parameterType="model.DepositExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from deposit_record
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="getSumBenefitByTime" parameterType="model.DepositExample" resultType="java.lang.Double">
        select
        sum(round(d.fee*f.taxes)) as proxy_taxes_sum_money
        from deposit_record d INNER JOIN financetaxes f ON (d.proxy_taxesid = f.id)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>

        <if test="orderByClause != null">
            order by ${orderByClause} DESC
        </if>
    </select>

    <select id="selectDepositWithTaxes" resultType="model.DepositWithTaxes">
        select u.storeName as shopName ,d.out_trade_no,d.phoneNum,d.remark,d.result,round(d.fee/100,2) as fee,
        d.trade_no,d.date,d.date_time,d.cause,round(d.proxy_taxes/100,2) as proxy_taxes_money
        from deposit_record d  INNER JOIN user u ON (u.phoneNum =
        d.phoneNum)
        <where>
            (d.date BETWEEN #{startTime} and #{endTime})
            <if test="phones!=null">
                and d.phoneNum IN
                <foreach collection="phones" item="phone" open="(" close=")" separator=",">
                    #{phone}
                </foreach>
            </if>
            <if test="depositWithTaxes.isLikeValue">
               and locate(#{depositWithTaxes.keyword},CONCAT_WS(',',d.phoneNum,u.storeName,d.out_trade_no,d.remark))>0
            </if>
        </where>
            order by d.date_time DESC
        <if test="depositWithTaxes.limitValue">
            limit ${depositWithTaxes.startSize}, ${depositWithTaxes.pageSize}
        </if>
    </select>

    <select id="countDepositWithTaxes" resultType="java.lang.Integer">
        select count(d.out_trade_no)
        from deposit_record d INNER JOIN user u ON (u.phoneNum =
        d.phoneNum)
        <where>
            (d.date BETWEEN #{startTime} and #{endTime})
            <if test="phones!=null">
                and d.phoneNum IN
                <foreach collection="phones" item="phone" open="(" close=")" separator=",">
                    #{phone}
                </foreach>
            </if>
            <if test="depositWithTaxes.isLikeValue">
                and locate(#{depositWithTaxes.keyword},CONCAT_WS(',',d.phoneNum,u.storeName,d.out_trade_no,d.remark))>0
            </if>
        </where>
    </select>



    <select id="selectByUsers" resultType="model.DepositWithTaxes">
        select d.out_trade_no,d.phoneNum,d.remark,d.result,format(round(d.fee)/100,2) as fee,
        d.trade_no,d.date,d.date_time,d.cause,round(d.fee*f.taxes/100,2) as proxy_taxes_money
        from deposit_record d INNER JOIN financetaxes f ON (d.proxy_taxesid = f.id)
        <where>
            1=1 and d.phoneNum IN
            <foreach collection="users" item="user" open="(" close=")" separator=",">
                #{user.phonenum}
            </foreach>
        </where>
    </select>


    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from deposit_record
        where out_trade_no = #{out_trade_no,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from deposit_record
    where out_trade_no = #{out_trade_no,jdbcType=VARCHAR}
  </delete>
    <delete id="deleteByExample" parameterType="model.DepositExample">
        delete from deposit_record
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="model.Deposit">
    insert into deposit_record (out_trade_no, phoneNum, trade_no, 
      fee, date, date_time, 
      remark, result, cause, 
      taxesid,taxes, proxy_taxesid,proxy_taxes)
    values (#{out_trade_no,jdbcType=VARCHAR}, #{phoneNum,jdbcType=VARCHAR}, #{trade_no,jdbcType=VARCHAR}, 
      #{fee,jdbcType=DOUBLE}, #{date,jdbcType=DATE}, #{date_time,jdbcType=TIMESTAMP}, 
      #{remark,jdbcType=VARCHAR}, #{result,jdbcType=VARCHAR}, #{cause,jdbcType=VARCHAR}, 
      #{taxesid,jdbcType=INTEGER},#{taxes,jdbcType=DOUBLE}, #{proxy_taxesid,jdbcType=INTEGER}),#{proxy_taxes,jdbcType=DOUBLE}
  </insert>
    <insert id="insertSelective" parameterType="model.Deposit">
        insert into deposit_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="out_trade_no != null">
                out_trade_no,
            </if>
            <if test="phoneNum != null">
                phoneNum,
            </if>
            <if test="trade_no != null">
                trade_no,
            </if>
            <if test="fee != null">
                fee,
            </if>
            <if test="date != null">
                date,
            </if>
            <if test="date_time != null">
                date_time,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="result != null">
                result,
            </if>
            <if test="cause != null">
                cause,
            </if>
            <if test="taxesid != null">
                taxesid,
            </if>
            <if test="taxes != null">
                taxes,
            </if>
            <if test="proxy_taxesid != null">
                proxy_taxesid,
            </if>
            <if test="proxy_taxes != null">
                proxy_taxes
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="out_trade_no != null">
                #{out_trade_no,jdbcType=VARCHAR},
            </if>
            <if test="phoneNum != null">
                #{phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="trade_no != null">
                #{trade_no,jdbcType=VARCHAR},
            </if>
            <if test="fee != null">
                #{fee,jdbcType=DOUBLE},
            </if>
            <if test="date != null">
                #{date,jdbcType=DATE},
            </if>
            <if test="date_time != null">
                #{date_time,jdbcType=TIMESTAMP},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="result != null">
                #{result,jdbcType=VARCHAR},
            </if>
            <if test="cause != null">
                #{cause,jdbcType=VARCHAR},
            </if>
            <if test="taxesid != null">
                #{taxesid,jdbcType=INTEGER},
            </if>
            <if test="taxes != null">
                #{taxes,jdbcType=DOUBLE},
            </if>
            <if test="proxy_taxesid != null">
                #{proxy_taxesid,jdbcType=INTEGER},
            </if>
            <if test="proxy_taxes != null">
                #{proxy_taxes,jdbcType=DOUBLE}
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="model.DepositExample" resultType="java.lang.Integer">
        select count(*) from deposit_record
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update deposit_record
        <set>
            <if test="record.out_trade_no != null">
                out_trade_no = #{record.out_trade_no,jdbcType=VARCHAR},
            </if>
            <if test="record.phoneNum != null">
                phoneNum = #{record.phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="record.trade_no != null">
                trade_no = #{record.trade_no,jdbcType=VARCHAR},
            </if>
            <if test="record.fee != null">
                fee = #{record.fee,jdbcType=DOUBLE},
            </if>
            <if test="record.date != null">
                date = #{record.date,jdbcType=DATE},
            </if>
            <if test="record.date_time != null">
                date_time = #{record.date_time,jdbcType=TIMESTAMP},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
            <if test="record.result != null">
                result = #{record.result,jdbcType=VARCHAR},
            </if>
            <if test="record.cause != null">
                cause = #{record.cause,jdbcType=VARCHAR},
            </if>
            <if test="record.taxesid != null">
                taxesid = #{record.taxesid,jdbcType=INTEGER},
            </if>
            <if test="record.taxes != null">
                taxes = #{record.taxes,jdbcType=DOUBLE},
            </if>
            <if test="record.proxy_taxesid != null">
                proxy_taxesid = #{record.proxy_taxesid,jdbcType=INTEGER},
            </if>
            <if test="record.proxy_taxes != null">
                proxy_taxes = #{record.proxy_taxes,jdbcType=DOUBLE},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update deposit_record
        set out_trade_no = #{record.out_trade_no,jdbcType=VARCHAR},
        phoneNum = #{record.phoneNum,jdbcType=VARCHAR},
        trade_no = #{record.trade_no,jdbcType=VARCHAR},
        fee = #{record.fee,jdbcType=DOUBLE},
        date = #{record.date,jdbcType=DATE},
        date_time = #{record.date_time,jdbcType=TIMESTAMP},
        remark = #{record.remark,jdbcType=VARCHAR},
        result = #{record.result,jdbcType=VARCHAR},
        cause = #{record.cause,jdbcType=VARCHAR},
        taxesid = #{record.taxesid,jdbcType=INTEGER},
        taxes = #{record.taxes,jdbcType=DOUBLE},
        proxy_taxesid = #{record.proxy_taxesid,jdbcType=INTEGER},
        proxy_taxes = #{record.proxy_taxes,jdbcType=DOUBLE}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="model.Deposit">
        update deposit_record
        <set>
            <if test="phoneNum != null">
                phoneNum = #{phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="trade_no != null">
                trade_no = #{trade_no,jdbcType=VARCHAR},
            </if>
            <if test="fee != null">
                fee = #{fee,jdbcType=DOUBLE},
            </if>
            <if test="date != null">
                date = #{date,jdbcType=DATE},
            </if>
            <if test="date_time != null">
                date_time = #{date_time,jdbcType=TIMESTAMP},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="result != null">
                result = #{result,jdbcType=VARCHAR},
            </if>
            <if test="cause != null">
                cause = #{cause,jdbcType=VARCHAR},
            </if>
            <if test="taxesid != null">
                taxesid = #{taxesid,jdbcType=INTEGER},
            </if>
            <if test="record.taxes != null">
                taxes = #{record.taxes,jdbcType=DOUBLE},
            </if>
            <if test="proxy_taxesid != null">
                proxy_taxesid = #{proxy_taxesid,jdbcType=INTEGER},
            </if>
            <if test="record.proxy_taxes != null">
                proxy_taxes = #{record.proxy_taxes,jdbcType=DOUBLE},
            </if>
        </set>
        where out_trade_no = #{out_trade_no,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="model.Deposit">
    update deposit_record
    set phoneNum = #{phoneNum,jdbcType=VARCHAR},
      trade_no = #{trade_no,jdbcType=VARCHAR},
      fee = #{fee,jdbcType=DOUBLE},
      date = #{date,jdbcType=DATE},
      date_time = #{date_time,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      result = #{result,jdbcType=VARCHAR},
      cause = #{cause,jdbcType=VARCHAR},
      taxesid = #{taxesid,jdbcType=INTEGER},
           taxes = #{record.taxes,jdbcType=DOUBLE},
      proxy_taxesid = #{proxy_taxesid,jdbcType=INTEGER},
        proxy_taxes = #{record.proxy_taxes,jdbcType=DOUBLE}
    where out_trade_no = #{out_trade_no,jdbcType=VARCHAR}
  </update>
</mapper>